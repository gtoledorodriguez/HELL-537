#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <sys/wait.h>

#define ARRAY_SIZE 512

const char error_message[30] = "An error has occurred\n";
const char prompt_message[] = "wish> ";
char *clear_input;

int tokenization(char *input, char * clear_input){
  char *words = strdup(input);
  int count = 0;
  int count_words = 0;
  while(words[count_words] != '\0'){
    if (isspace(*words))
      words++;
    else{
      while(!isspace(words[count_words]) && words[count_words] != '\0'){
	clear_input[count] = words[count_words];
	count++;
	count_words++;
      }
      if(words[count_words] != '\0'){
	count_words++;
      }
    }
  }
  return count;
}



int main(int argc, char  *argv[]){
  FILE  *file = NULL;
  int batch = 0;
  size_t line_size  = 512;
  char *input = (char *)malloc(ARRAY_SIZE * sizeof(char));
  clear_input = (char *) malloc(ARRAY_SIZE * sizeof(char));
  int redirect = 0;
  int background = 0;
  int internalCmd = 0;
  

  if (argc == 1){
    file = stdin;
  }
  else if(argc == 2){
    file = fopen(argv[1],"r");
    if(file == NULL){
      write(STDERR_FILENO, error_message, strlen(error_message)); 
      exit(1);
    }
    batch = 1;
  }
  else{
    write(STDERR_FILENO, error_message, strlen(error_message));
    exit(1);
  }
  if (batch == 0){
    write(STDOUT_FILENO, prompt_message, strlen(prompt_message));
  }

  while(getline(&input,&line_size, file)!= -1){
    if(tokenization(input,clear_input) == 0){
      write(STDERR_FILENO, error_message, strlen(error_message));
    }
    else if (tokenization(input, clear_input) > 0){
      if(clear_input[0] == '&' || clear_input[0] == '>'){
        write(STDERR_FILENO, error_message, strlen(error_message));
        write(STDOUT_FILENO, prompt_message, strlen(prompt_message));
      }
    }
    if(batch == 1){
      write(STDOUT_FILENO, input, strlen(input));
    }
    char *redirect_words = strtok(strdup(input),">");
    char *after_token = strtok(NULL, ">");
    if(*redirect_words != strlen(input)){
      redirect = 1;
      if(after_token){
        write(STDERR_FILENO, error_message, strlen(error_message));
        write(STDOUT_FILENO, prompt_message, strlen(prompt_message));
      }
    }
    int word_count = 0;
    if(redirect == 0){
      word_count = tokenization(input, clear_input);
    }
    else{
      word_count = tokenization(redirect_words, clear_input);
      int count_after = tokenization(after_token, &clear_input[word_count]);
      word_count += count_after;
      if(count_after < 1 || count_after > 2 || ((count_after == 2 || count_after == 1) && strcmp(&clear_input[word_count - 1], "&")== 0)){
        write(STDERR_FILENO, error_message, strlen(error_message));
        write(STDOUT_FILENO, prompt_message, strlen(prompt_message));
      }
    }

    if(strcmp(&clear_input[word_count - 1], "&") == 0){
      background = 1;
      word_count--;
    }
    if(strlen(&clear_input[word_count - 1]) == (1+strlen(strtok(&clear_input[word_count - 1], "&")))){
      background = 1;
    }
    int out = dup(1);
    if(redirect == 1){
      int output = open(&clear_input[word_count - 1], O_WRONLY|O_CREAT|O_TRUNC, S_IRWXU);
      if(output < 0 || dup2(output,1)<0){
        write(STDERR_FILENO, error_message, strlen(error_message));
        write(STDOUT_FILENO, prompt_message, strlen(prompt_message));
      }
    }
      //exit
      if(strcmp(&clear_input[0], "exit") == 0){
        if(word_count != 1){
          write(STDERR_FILENO, error_message, strlen(error_message));
          write(STDOUT_FILENO, prompt_message, strlen(prompt_message));
        }
        else
          exit(0);
      }
    //cd
    if(strcmp(&clear_input[0], "cd") == 0){
      internalCmd = 1;
      int change_dir;
      if(word_count == 1){
	fprintf("here");
        change_dir = chdir(getenv("HOME"));
        if(change_dir != 0){
          write(STDERR_FILENO, error_message, strlen(error_message));
          dup2(out,1);
        }
      }
      else if (word_count == 2){
        change_dir = chdir(&clear_input[word_count - 1]);
        if(change_dir != 0){
          write(STDERR_FILENO, error_message, strlen(error_message));
          write(STDOUT_FILENO, prompt_message, strlen(prompt_message));
          dup2(out,1);
        }
      }
    }

      int j;
      char *command[ARRAY_SIZE];
      int command_count = 0;
      if(redirect == 1){
        for(j = 0; j< word_count -1; j++){
          command[j] = strdup(&clear_input[j]);
          command_count = j;
          command[command_count] = NULL;
        }
      }
      else{
        for(j = 0; j< word_count; j++){
          command[j] = strdup(&clear_input[j]);
          command_count = j;
          command[command_count] = NULL;
        }
      }

    pid_t child;
    int status;
    if(internalCmd == 0){
      child = fork();
      if(child == 0){
        execvp(command[0], command);
        write(STDERR_FILENO, error_message, strlen(error_message));
      }
      else if(child == (pid_t) - 1){
        write(STDERR_FILENO, error_message, strlen(error_message));
      }
      else{
        if(background == 0){
          wait(&status);
        }
      }
    }
    dup2(out,1);
    write(STDOUT_FILENO, prompt_message, strlen(prompt_message));
  }
    return 0;
}
